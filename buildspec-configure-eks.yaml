
version: 0.2

environment_variables:
  plaintext:
    AMX_PPL_ENV: "DES"
    AMX_PPL_CLUSTER_EKS: "amx-ppl-cc-des"
    AMX_APP_PREFIX: "amx-ppl-cc-des"
    AMX_PPL_NAMESPACE: "amx-ppl-cc-des-ns"
    AMX_PPL_VPC_ID: "vpc-0c9d013543a933d4a"
    AMX_PPL_ECR_REPO: "602401143452.dkr.ecr.us-east-1.amazonaws.com"
phases:
  install:
    commands:
      - |
        curl --silent \
             --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
      - mv -vf /tmp/eksctl /usr/local/bin
      - chmod +x /usr/local/bin/eksctl
      - curl -LO https://dl.k8s.io/release/v1.23.16/bin/linux/amd64/kubectl
      - mv -vf kubectl /usr/local/bin
      - chmod +x /usr/local/bin/kubectl
      - kubectl version --client --output=yaml
      - curl --silent --location https://get.helm.sh/helm-v3.10.2-linux-amd64.tar.gz  | tar xz -C /tmp
      - mv /tmp/linux-amd64/helm /usr/local/bin && chmod +x /usr/local/bin/helm
      - helm version --short
      - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - unzip -u awscliv2.zip
      - ./aws/install --bin-dir /root/.pyenv/shims/ --install-dir /usr/local/aws-cli --update
      - aws --version
  pre_build:
    commands:
      - 
        | 
        enable -n exit
      - export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output=text)
      - EKS_DEPLOYER_ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/$AMX_PPL_CLUSTER_EKS-iam-rol-eks-deployer"
      - EKS_ROLE_KUBECTL_ARN="arn:aws:iam::${ACCOUNT_ID}:role/AMX-PPL-CB-EKS-KUBECTL-${ACCOUNT_ID}-$AWS_REGION"
      - EKS_ROLE_BACKEND_ARN="arn:aws:iam::${ACCOUNT_ID}:role/$AMX_PPL_CLUSTER_EKS-${ACCOUNT_ID}-$AWS_REGION"
      - CREDENTIALS=$(aws sts assume-role --role-arn ${EKS_ROLE_KUBECTL_ARN} --role-session-name amx-ppl-cc-admin)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN=$(echo "${CREDENTIALS}" | jq -r '.Credentials.SessionToken')
      - |
        aws eks update-kubeconfig            \
          --name $AMX_PPL_CLUSTER_EKS        \
          --role-arn ${EKS_DEPLOYER_ROLE_ARN} \
          --region $AWS_REGION
      - kubectl get cm aws-auth -n kube-system -o yaml | grep rolearn | grep amx-ppl-cc-des-iam-rol-eks-deployer
      - kubectl get cm aws-auth -n kube-system -o yaml | grep rolearn | grep $AMX_PPL_CLUSTER_EKS-iam-rol-eks-deployer
      - EksCheckRoleBackend=$(kubectl get cm aws-auth -n kube-system -o yaml | grep rolearn | grep ${AMX_PPL_CLUSTER_EKS}-${ACCOUNT_ID}-${AWS_REGION}) 
      - |
        if [ -z "${EksCheckRoleBackend}" ]
        then
          ROLE="    - groups:\n        - system:masters\n      rolearn: ${EKS_ROLE_BACKEND_ARN}\n      username: codebuild-eks"
          kubectl get -n kube-system configmap/aws-auth -o yaml | awk "/mapRoles: \|/{print;print \"${ROLE}\";next}1" > /tmp/aws-auth-patch-backend.yml
          kubectl patch configmap/aws-auth -n kube-system --patch "$(cat /tmp/aws-auth-patch-backend.yml)"
        fi
      - oidc_provider=$(aws eks describe-cluster --name $AMX_PPL_CLUSTER_EKS --region $AWS_REGION --query "cluster.identity.oidc.issuer" --output text | sed -e "s/^https:\/\///")
      - |
        if [ -z ${oidc_provider} ]
        then
          eksctl utils associate-iam-oidc-provider \
            --region $AWS_REGION                   \
            --cluster $AMX_PPL_CLUSTER_EKS         \
            --approve
        fi
  build:
    commands:
  post_build:
    commands:
      - kubectl get pods -A -o wide
      - kubectl get deployment -A -o wide
      - kubectl top pods -A
artifacts:
  files:
    - manifests/**/*
